package com.gasxgj3iotyun.modules.sys.service.impl;


import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang.RandomStringUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.baomidou.mybatisplus.service.impl.ServiceImpl;
import com.gasxgj3iotyun.common.annotation.DataFilter;
import com.gasxgj3iotyun.common.utils.Constant;
import com.gasxgj3iotyun.common.utils.PageUtils;
import com.gasxgj3iotyun.common.utils.Query;
import com.gasxgj3iotyun.miservice.entity.customer.CustomerUserEntity;
import com.gasxgj3iotyun.modules.customer.service.CustomerUserService;
import com.gasxgj3iotyun.modules.sys.dao.SysUserDao;
import com.gasxgj3iotyun.modules.sys.entity.SysDeptEntity;
import com.gasxgj3iotyun.modules.sys.entity.SysUserEntity;
import com.gasxgj3iotyun.modules.sys.service.SysDeptService;
import com.gasxgj3iotyun.modules.sys.service.SysUserRoleService;
import com.gasxgj3iotyun.modules.sys.service.SysUserService;
import com.gasxgj3iotyun.modules.sys.shiro.ShiroUtils;


/**
 * 系统用户
 */
@Service("sysUserService")
public class SysUserServiceImpl extends ServiceImpl<SysUserDao, SysUserEntity> implements SysUserService {
	@Autowired
	private SysUserRoleService sysUserRoleService;
	@Autowired
	private SysDeptService sysDeptService;
	@Autowired
	private SysUserService sysUserService;	
	@Autowired
	private CustomerUserService customerUserService;
	
	@Override
	public List<Long> queryAllMenuId(Long userId) {
		return baseMapper.queryAllMenuId(userId);
	}

	@Override
	@DataFilter(subDept = true, user = false)
	public PageUtils queryPage(Map<String, Object> params) {
		String username = (String)params.get("username");

		Page<SysUserEntity> page = this.selectPage(
			new Query<SysUserEntity>(params).getPage(),
			new EntityWrapper<SysUserEntity>()
				.like(StringUtils.isNotBlank(username),"username", username)
				.addFilterIfNeed(params.get(Constant.SQL_FILTER) != null, (String)params.get(Constant.SQL_FILTER))
		);

		for(SysUserEntity sysUserEntity : page.getRecords()){
			SysDeptEntity sysDeptEntity = sysDeptService.selectById(sysUserEntity.getDeptId());
			sysUserEntity.setDeptName(sysDeptEntity.getName());
		}

		return new PageUtils(page);
	}

	@Override
	@Transactional(rollbackFor = Exception.class)
	public void save(SysUserEntity user) {
		user.setCreateTime(new Date());
		//sha256加密
		String salt = RandomStringUtils.randomAlphanumeric(20);
		user.setSalt(salt);
		user.setPassword(ShiroUtils.sha256(user.getPassword(), user.getSalt()));
		this.insert(user);		
		//保存用户与角色关系
		sysUserRoleService.saveOrUpdate(user.getUserId(), user.getRoleIdList());
		//添加到APP登录账号
		CustomerUserEntity customerUser = new CustomerUserEntity();	
		customerUser.setUserId(user.getUserId());
		customerUser.setMobile(user.getUsername());
	 	customerUser.setUsername(user.getUsername());
	 	customerUser.setPassword(user.getPassword());
//	 	customerUser.setPassword(DigestUtils.sha256Hex(user.getPassword()));
//	 	customerUser.setPassword(ShiroUtils.sha256(user.getPassword(), user.getSalt()));
	 	customerUser.setCreateTime(new Date());
        customerUserService.insert(customerUser);
		
	}
	 
	@Override
	@Transactional(rollbackFor = Exception.class)
	public void update(SysUserEntity user) {
		if(StringUtils.isBlank(user.getPassword())){
			user.setPassword(null);
		}else{
			SysUserEntity userEntity = this.selectById(user.getUserId());
			user.setPassword(ShiroUtils.sha256(user.getPassword(), userEntity.getSalt()));
		}
		this.updateById(user);
		//保存用户与角色关系
		sysUserRoleService.saveOrUpdate(user.getUserId(), user.getRoleIdList());
		//修改Customer
		CustomerUserEntity customerUserSelectOne = customerUserService.selectById(user.getUserId());
		if(StringUtils.isBlank(user.getPassword())){
			customerUserSelectOne.setPassword(null);
		}else {
			customerUserSelectOne.setPassword(user.getPassword());
//			customerUserSelectOne.setPassword(DigestUtils.sha256Hex(user.getPassword()));
//			SysUserEntity userEntity = this.selectById(user.getUserId());
//			customerUserSelectOne.setPassword(ShiroUtils.sha256(user.getPassword(), userEntity.getSalt()));
		}
		customerUserService.updateById(customerUserSelectOne);
	}


	@Override
	public boolean updatePassword(Long userId, String password, String newPassword) {		
        SysUserEntity userEntity = new SysUserEntity();
        userEntity.setPassword(newPassword);
        boolean updatePassword = sysUserService.update(userEntity,new EntityWrapper<SysUserEntity>().eq("user_id", userId).eq("password", password));
        
        CustomerUserEntity customerUserEntity = new CustomerUserEntity();
        customerUserEntity.setPassword(newPassword);
        updatePassword = customerUserService.update(customerUserEntity,new EntityWrapper<CustomerUserEntity>().eq("user_id", userId).eq("password", password));
        return updatePassword;
    }

}
